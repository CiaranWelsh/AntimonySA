?start: modulepart

modulepart: assignment lineend
//                                                                      Used in original Bison code:
assignment              :   varmaybein ":" maxormin formula             //{if (g_registry.CurrentModule()->AddObjective($1, $4, $3)) YYABORT;}
                        |   varmaybein "=" formula                      //{if ($1->SetFormula($3)) YYABORT; }
                        |   varmaybein IS variable                      //{if ($1->Synchronize($3, NULL)) YYABORT;}
                        |   varmaybein IS variable "/" variable         //{if ($1->Synchronize($3, $5)) YYABORT;}
                        |   varmaybein "*" variable IS variable         //{if ($1->Synchronize($5, $3)) YYABORT;}
                        |   varmaybein IS TEXTSTRING                    //{if ($1->SetDisplayName(*($3))) YYABORT;}
                        |   varmaybein ":=" formula                     //{if ($1->SetAssignmentRule($4)) YYABORT;}
                        |   varmaybein "\'" "=" formula                 //{if ($1->SetRateRule($4)) YYABORT;}
                        |   varmaybein HASWORD unitdef                  //{if ($1->SetUnit($3)) YYABORT; }

varmaybein              :   variable                      -> variable              // {$$ = $1;}
                        |   variablein                                  // {$$ = $1;}
variable                :   ANTWORD                                     // {$$ = g_registry.AddVariableToCurrent($1); }
                        |   variable "." ANTWORD                        // {$$ = $1->GetSubVariable($3);
                        |   "$" variable                                // {$$ = $2; if ($$->SetIsConst(true)) YYABORT;}
variablein              :   variable INWORD variable                    // {if ($1->SetCompartment($3)) YYABORT; $$ = $1;}
maxormin                :   MAXIMIZEWORD                                // {$$ = true;}
                        |   MINIMIZEWORD                                // {$$ = false;}

unitdef                 :  formula
formula                 :  // ""  Note: Missing "empty" that was in original grammar       // /* empty */ {$$ = g_registry.NewBlankFormula(); }
                        |  formula ELLIPSES                             // {$$ = $1; $1->AddEllipses();}
                        |  formula variable                             // {$$ = $1; if($1->AddVariable($2)) YYABORT; }
                        |  formula NUM                                  // {$$ = $1; $1->AddNum($2); }
                        |  formula CONSTANT                             // {$$ = $1; $1->AddText($2); }
                        |  formula FUNCTION                             // {$$ = $1; $1->AddText($2); }
                        |  formula "(" commaformula ")"                 // {$$ = $1; $3->AddParentheses(); $$->AddFormula($3); }
                        |  formula "{" commaformula "}"                 // {$$ = $1; $3->AddCurlyBrackets(); $$->AddFormula($3); }
                        |  formula maththing                            // {$$ = $1; $1->AddMathThing($2); }
                        |  formula inequality                           // {$$ = $1; $1->AddInequality($2); }
                        |  formula "=" "="                              // {$$ = $1; $1->AddMathThing("="); $1->AddMathThing("="); }
                        |  formula "&" "&"                              // {$$ = $1; $1->AddMathThing("&"); $1->AddMathThing("&"); }
                        |  formula "|" "|"                              // {$$ = $1; $1->AddMathThing('|'); $1->AddMathThing('|'); }
commaformula            :  formula                                      // {$$ = $1;}
                        |  commaformula "," formula                     // {$$ = $1; $$->AddMathThing(','); $$->AddFormula($3); }
maththing               :  "+"                                          // {$$ = "+";}
                        |  "-"                                          // {$$ = "-";}
                        |  "*"                                          // {$$ = "*";}
                        |  "/"                                          // {$$ = "/";}
                        |  "^"                                          // {$$ = "^";}
                        |  "!"                                          // {$$ = "!";}
                        |  "%"                                          // {$$ = "%";}
inequality              :  "<"                                          // {$$ = constLT;}
                        |  LEQ                                          // {$$ = constLEQ;}
                        |  ">"                                          // {$$ = constGT;}
                        |  GEQ                                          // {$$ = constGEQ;}
                        |  NEQ                                          // {$$ = constNEQ;}

lineend                 :  ";"
                        |  "\n"
                        |  "EOL"



// YYEOF                   : "0" | "end of file"                            //%token
// EOL                     : "end of line"                                  //%token
NUM                        : NUMBER
%import common.NUMBER
// NUM                     : "number"                                       // %token  <num>
// AFTER                   : "after"                                        // %token  <word>
// // ANTWORD                 : "element name"                                 // %token  <word>
ANTWORD                 : /[A-Za-z0-9]+/     //"element name"                                 // %token  <word>
// AT                      : "@" | "at"                                     // %token  <word>
// BECOMESREV              : "->"                                           // %token  <word>
// BECOMESINH              : "-|"                                           // %token  <word>
// BECOMESMOD2             : "-o"                                           // %token  <word>
// BECOMESIRREV            : "=>"                                           // %token  <word>
// COMPARTMENT             : "compartment"                                // %token  <word>
// CONSTANT                : "name of a pre-defined constant"               // %token  <word>
// CONSTRAINTWORD          : "constraint"                                 // %token  <word>
// CONSTWORD               : "const"                                      // %token  <word>
// DASHES                  : "--"                                           // %token  <word>
// DELETEWORD              : "delete"                                       // %token  <word>
// DNA                     : "DNA"                                          // %token  <word>
ELLIPSES                : "..."                                          // %token  <word>
// END                     : "end"                                          // %token  <word>
// ERROR                   : "an error"                                     // %token  <word>
// EVENT                   : "event"                                        // %token  <word>
// FORMULA                 : "formula"                                      // %token  <word>
// FUNCTION                : "name of an existing function"                 // %token  <word>
// FUNCTIONWORD            : "function"                                     // %token  <word>
// GENE                    : "gene"                                         // %token  <word>
// GEQ                     : ">="                                           // %token  <word>
// NEQ                     : "!="                                           // %token  <word>
 HASWORD                 : "has"                                          // %token  <word>
// IMPORT                  : "import"                                       // %token  <word>
INWORD                  : "in"                                           // %token  <word>
 IS                      : "is"                                           // %token  <word>
// LEQ                     : "<="                                           // %token  <word>
MAXIMIZEWORD            : "maximize"                                     // %token  <word>
MINIMIZEWORD            : "minimize"                                     // %token  <word>
// MODNAME                 : "name of an existing module"                   // %token  <word>
// MODULE                  : "model or module"                              // %token  <word>
// OPERATOR                : "operator"                                     // %token  <word>
// REACTION                : "reaction"                                     // %token  <word>
// SPECIES                 : "species"                                      // %token  <word>
// SUBSTONLY               : "substanceOnly"                                // %token  <word>
TEXTSTRING              : ""/[A-Za-z09_]+/""                                  // %token  <word>
// UNITWORD                : "unit"                                         // %token  <word>
// VARWORD                 : "var"                                          // %token  <word>

%import common.WS
%ignore WS

//%import common.NUMBER
// NUM : NUMBER


// MODULE: maybemain ANTWORD "(" variableexportlist ")" modulebody END
//"import" FILENAME -> import_filename
      //| module

// import statement grammar
// ------------------------
// DRIVE_LETTER allowed 0 or more times
// recursive to allow for arbitrary filename segments
// FILENAME:  DOUBLE_QUOTE FILENAME_SEGMENT (FILENAME_SEGMENT)* DOUBLE_QUOTE
// FILENAME_SEGMENT: FILE_SEPARATOR WORD
// FILE_SEPARATOR: "/"

// module statement grammar
// ?module: MODULE
// common rules and terminators

// DOUBLE_QUOTE            :  /"/
// SINGLE_QUOTE            :  /'/
// WORD                    :  /[A-Za-z0-9_\.]*/

